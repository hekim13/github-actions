name: Build and push the latest Docker image

on:
  workflow_call:
    inputs:
      docker_context:
        type: string
      dockerfile_path:
        type: string
      tag_prefix:
        type: string
      tag_suffix: 
        required: true
        type: string
      platform:
        required: true
        type: string
    secrets:
      docker_username:
        required: true
      docker_password:
        required: true
      docker_repository:
        required: true

jobs:

  build-and-push-docker-image:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}
      
      - name: Set the Docker context
        id: setdockercontext
        run: |
          DOCKERCONTEXT=.
          if [ ! -z "${{ inputs.docker_context }}" ]
          then
            DOCKERCONTEXT=${{ inputs.docker_context }}
          fi
          echo ::set-output name=dockercontext::${DOCKERCONTEXT}

      - name: Set the Dockerfile
        id: setdockerfile
        run: |
          DOCKERFILE=./Dockerfile
          if [ ! -z "${{ inputs.dockerfile_path }}" ]
          then
            DOCKERFILE=${{ inputs.dockerfile_path }}
          fi
          echo ::set-output name=dockerfile::${DOCKERFILE}

      - name: Set the tag
        id: settag
        run: |
          TAG=latest-${{ inputs.tag_suffix }}
          if [ !-z "${{ inputs.tag_prefix }}" ]
          then
            TAG=${{ inputs.tag_prefix }}-${{ inputs.tag_suffix }}
          fi
          echo ::set-output name=tag::${TAG}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ steps.setdockercontext.outputs.dockercontext }}
          file: ${{ steps.setdockerfile.outputs.dockerfile }}
          platforms: ${{ inputs.platform }}
          pull: true
          push: true
          cache-from: type=registry,ref=${{ secrets.docker_repository }}:${{ steps.settag.outputs.tag }}
          cache-to: type=inline
          tags: ${{ secrets.docker_repository }}:${{ steps.settag.outputs.tag }}
