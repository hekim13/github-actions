name: Build and push the latest Docker image

on:
  workflow_call:
    inputs:
      docker_context:
        type: string
      dockerfile_path:
        type: string
        default: './Dockerfile'
      tag_suffix: 
        type: string
      platform:
        required: true
        type: string
      use_scan:
        type: boolean
        default: true
    secrets:
      docker_username:
        required: true
      docker_password:
        required: true
      docker_repository:
        required: true

jobs:

  build-and-push-docker-image:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}
      
      - name: Get the Docker context
        id: getdockercontext
        run: |
          DOCKERCONTEXT=.
          if [ ! -z "${{ inputs.docker_context }}" ]
          then
            DOCKERCONTEXT=${{ inputs.docker_context }}
          fi
          echo ::set-output name=dockercontext::${DOCKERCONTEXT}

      - name: Get the tag
        id: gettag
        run: |
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          if [ ! -z "${{ inputs.tag_suffix }}" ]
          then
            VERSION=${VERSION}-${{ inputs.tag_suffix }}
          fi
          TAG=${VERSION}
          echo ::set-output name=tag::${TAG}
      
      - name: Get the metadata
        id: getmetadata
        run: |
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Build Docker image
        if: ${{ inputs.use_scan }} == true
        uses: docker/build-push-action@v2
        with:
          context: ${{ steps.getdockercontext.outputs.dockercontext }}
          file: ${{ inputs.dockerfile_path }}
          platforms: ${{ inputs.platform }}
          push: true
          cache-from: type=registry,ref=trivy-scan-${{ secrets.docker_repository }}:${{ steps.gettag.outputs.tag }}
          cache-to: type=inline
          tags: trivy-scan-${{ secrets.docker_repository }}:${{ steps.gettag.outputs.tag }}
      
      - name: Run Trivy vulnerability scanner
        if: ${{ inputs.use_scan }} == true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/trivy-scan-${{ secrets.docker_repository }}:${{ steps.gettag.outputs.tag }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ steps.getdockercontext.outputs.dockercontext }}
          file: ${{ inputs.dockerfile_path }}
          platforms: ${{ inputs.platform }}
          push: true
          cache-from: type=registry,ref=${{ secrets.docker_repository }}:${{ steps.gettag.outputs.tag }}
          cache-to: type=inline
          tags: ${{ secrets.docker_repository }}:${{ steps.gettag.outputs.tag }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.getmetadata.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
      
